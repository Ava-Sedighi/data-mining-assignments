{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "JcBSFkRP0PHf"
      },
      "outputs": [],
      "source": [
        "# First we import the libraries we need\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bGGRAZbh0YmK"
      },
      "source": [
        "## Question 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "VtUsMb3z0X7-",
        "outputId": "b8a44b49-8fd5-45ea-9532-41287f9582af"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-2eaa3eda-4955-48b8-9aa3-5564ba391db1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2eaa3eda-4955-48b8-9aa3-5564ba391db1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2eaa3eda-4955-48b8-9aa3-5564ba391db1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2eaa3eda-4955-48b8-9aa3-5564ba391db1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4ac11150-d93d-457b-8c03-61afc9f8f7bd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ac11150-d93d-457b-8c03-61afc9f8f7bd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4ac11150-d93d-457b-8c03-61afc9f8f7bd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0 2010-12-01 08:26:00       2.55     17850.0  United Kingdom  \n",
              "1 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  \n",
              "2 2010-12-01 08:26:00       2.75     17850.0  United Kingdom  \n",
              "3 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  \n",
              "4 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  "
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# reading the file which contains the data\n",
        "online_retail = pd.read_excel('Online Retail.xlsx')\n",
        "online_retail.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fRAhKRJN4Dqu",
        "outputId": "e8851f25-d084-461f-dae3-20e3612f84d5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-ebd8cb06-b8f0-4f30-bdd4-51bc31b995ab\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "      <th>cutomer_id</th>\n",
              "      <th>country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebd8cb06-b8f0-4f30-bdd4-51bc31b995ab')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ebd8cb06-b8f0-4f30-bdd4-51bc31b995ab button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ebd8cb06-b8f0-4f30-bdd4-51bc31b995ab');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0c76e889-005e-45dd-9883-acf9bd2e6872\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c76e889-005e-45dd-9883-acf9bd2e6872')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0c76e889-005e-45dd-9883-acf9bd2e6872 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  invoice_No stock_code                          description  quantity  \\\n",
              "0     536365     85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1     536365      71053                  WHITE METAL LANTERN         6   \n",
              "2     536365     84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3     536365     84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4     536365     84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "         invoice_date  unit_price  cutomer_id         country  \n",
              "0 2010-12-01 08:26:00        2.55     17850.0  United Kingdom  \n",
              "1 2010-12-01 08:26:00        3.39     17850.0  United Kingdom  \n",
              "2 2010-12-01 08:26:00        2.75     17850.0  United Kingdom  \n",
              "3 2010-12-01 08:26:00        3.39     17850.0  United Kingdom  \n",
              "4 2010-12-01 08:26:00        3.39     17850.0  United Kingdom  "
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail.columns = ['invoice_No', 'stock_code', 'description', 'quantity', 'invoice_date', 'unit_price', 'cutomer_id', 'country']\n",
        "online_retail.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ENQYebAU4Bii",
        "outputId": "b08d8e44-7c5e-4df7-b51e-08f8611964ac"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 541909 entries, 0 to 541908\n",
            "Data columns (total 8 columns):\n",
            " #   Column        Non-Null Count   Dtype         \n",
            "---  ------        --------------   -----         \n",
            " 0   invoice_No    541909 non-null  object        \n",
            " 1   stock_code    541909 non-null  object        \n",
            " 2   description   540455 non-null  object        \n",
            " 3   quantity      541909 non-null  int64         \n",
            " 4   invoice_date  541909 non-null  datetime64[ns]\n",
            " 5   unit_price    541909 non-null  float64       \n",
            " 6   cutomer_id    406829 non-null  float64       \n",
            " 7   country       541909 non-null  object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(1), object(4)\n",
            "memory usage: 33.1+ MB\n"
          ]
        }
      ],
      "source": [
        "online_retail.info()\n",
        "# it shows we have missing values in description and customer_id."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "Nfuo_jhK4WFe",
        "outputId": "bfb91813-d0dc-45b1-b765-48289b19ca01"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail_copy"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-e9be7b10-88d5-420c-ba43-35d7afccebdf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>2.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>541909 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9be7b10-88d5-420c-ba43-35d7afccebdf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e9be7b10-88d5-420c-ba43-35d7afccebdf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e9be7b10-88d5-420c-ba43-35d7afccebdf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4c0f4de0-0a39-4d4e-80cf-6e29ed408598\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c0f4de0-0a39-4d4e-80cf-6e29ed408598')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4c0f4de0-0a39-4d4e-80cf-6e29ed408598 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ad762500-d303-4a39-8de5-aacc399ad1aa\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('online_retail_copy')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ad762500-d303-4a39-8de5-aacc399ad1aa button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('online_retail_copy');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       invoice_No stock_code                          description  quantity  \\\n",
              "0          536365     85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1          536365      71053                  WHITE METAL LANTERN         6   \n",
              "2          536365     84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3          536365     84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4          536365     84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "...           ...        ...                                  ...       ...   \n",
              "541904     581587      22613          PACK OF 20 SPACEBOY NAPKINS        12   \n",
              "541905     581587      22899         CHILDREN'S APRON DOLLY GIRL          6   \n",
              "541906     581587      23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n",
              "541907     581587      23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
              "541908     581587      22138        BAKING SET 9 PIECE RETROSPOT          3   \n",
              "\n",
              "              invoice_date  unit_price  \n",
              "0      2010-12-01 08:26:00        2.55  \n",
              "1      2010-12-01 08:26:00        3.39  \n",
              "2      2010-12-01 08:26:00        2.75  \n",
              "3      2010-12-01 08:26:00        3.39  \n",
              "4      2010-12-01 08:26:00        3.39  \n",
              "...                    ...         ...  \n",
              "541904 2011-12-09 12:50:00        0.85  \n",
              "541905 2011-12-09 12:50:00        2.10  \n",
              "541906 2011-12-09 12:50:00        4.15  \n",
              "541907 2011-12-09 12:50:00        4.15  \n",
              "541908 2011-12-09 12:50:00        4.95  \n",
              "\n",
              "[541909 rows x 6 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# make a copy to select the attributes we need.\n",
        "online_retail_copy = online_retail.copy()\n",
        "# dropping customer_id beccause with invoice_No available, we do not need it.\n",
        "online_retail_copy.drop(['cutomer_id'], axis=1, inplace=True)\n",
        "online_retail_copy.drop(['country'], axis=1, inplace=True)\n",
        "online_retail_copy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uc16jH6e4WRo",
        "outputId": "4b386903-a290-40f9-d72a-b41802075cd8"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail_copy"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-fb632d0c-b253-4b01-aa79-8faac1acaf27\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb632d0c-b253-4b01-aa79-8faac1acaf27')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb632d0c-b253-4b01-aa79-8faac1acaf27 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb632d0c-b253-4b01-aa79-8faac1acaf27');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-eb16ec7f-f9b4-467b-aaf8-40acb041b058\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb16ec7f-f9b4-467b-aaf8-40acb041b058')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-eb16ec7f-f9b4-467b-aaf8-40acb041b058 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  invoice_No stock_code                          description  quantity  \\\n",
              "0     536365      85123   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1     536365      71053                  WHITE METAL LANTERN         6   \n",
              "2     536365      84406       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3     536365      84029  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4     536365      84029       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "         invoice_date  unit_price  \n",
              "0 2010-12-01 08:26:00        2.55  \n",
              "1 2010-12-01 08:26:00        3.39  \n",
              "2 2010-12-01 08:26:00        2.75  \n",
              "3 2010-12-01 08:26:00        3.39  \n",
              "4 2010-12-01 08:26:00        3.39  "
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail_copy['stock_code'] = online_retail_copy['stock_code'].astype(str).str.replace(r'[a-zA-Z]', '', regex=True)\n",
        "online_retail_copy['invoice_No'] = online_retail_copy['invoice_No'].astype(str).str.replace(r'^[a-zA-Z]', '', regex=True)\n",
        "online_retail_copy['invoice_date'] = pd.to_datetime(online_retail_copy['invoice_date'])\n",
        "online_retail_copy.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "x29yZ4dcdGIt",
        "outputId": "2b205ad3-a5ab-4cfa-9452-efd98b364b50"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail_valid"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-ab8784a7-c0e6-4247-b67d-5a73daa1cc13\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123</td>\n",
              "      <td>white hanging heart t-light holder</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>white metal lantern</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406</td>\n",
              "      <td>cream cupid hearts coat hanger</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>knitted union flag hot water bottle</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>red woolly hottie white heart.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>pack of 20 spaceboy napkins</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>children's apron dolly girl</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>2.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>childrens cutlery dolly girl</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>childrens cutlery circus parade</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>baking set 9 piece retrospot</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>539990 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab8784a7-c0e6-4247-b67d-5a73daa1cc13')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab8784a7-c0e6-4247-b67d-5a73daa1cc13 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab8784a7-c0e6-4247-b67d-5a73daa1cc13');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7f1a19fe-161e-42f2-bb66-457e585b662e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f1a19fe-161e-42f2-bb66-457e585b662e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7f1a19fe-161e-42f2-bb66-457e585b662e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f2f79afc-84a3-4ef6-af25-a1c904409101\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('online_retail_valid')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f2f79afc-84a3-4ef6-af25-a1c904409101 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('online_retail_valid');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       invoice_No stock_code                          description  quantity  \\\n",
              "0          536365      85123   white hanging heart t-light holder         6   \n",
              "1          536365      71053                  white metal lantern         6   \n",
              "2          536365      84406       cream cupid hearts coat hanger         8   \n",
              "3          536365      84029  knitted union flag hot water bottle         6   \n",
              "4          536365      84029       red woolly hottie white heart.         6   \n",
              "...           ...        ...                                  ...       ...   \n",
              "541904     581587      22613          pack of 20 spaceboy napkins        12   \n",
              "541905     581587      22899          children's apron dolly girl         6   \n",
              "541906     581587      23254         childrens cutlery dolly girl         4   \n",
              "541907     581587      23255      childrens cutlery circus parade         4   \n",
              "541908     581587      22138         baking set 9 piece retrospot         3   \n",
              "\n",
              "              invoice_date  unit_price  \n",
              "0      2010-12-01 08:26:00        2.55  \n",
              "1      2010-12-01 08:26:00        3.39  \n",
              "2      2010-12-01 08:26:00        2.75  \n",
              "3      2010-12-01 08:26:00        3.39  \n",
              "4      2010-12-01 08:26:00        3.39  \n",
              "...                    ...         ...  \n",
              "541904 2011-12-09 12:50:00        0.85  \n",
              "541905 2011-12-09 12:50:00        2.10  \n",
              "541906 2011-12-09 12:50:00        4.15  \n",
              "541907 2011-12-09 12:50:00        4.15  \n",
              "541908 2011-12-09 12:50:00        4.95  \n",
              "\n",
              "[539990 rows x 6 columns]"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail_copy['description'] = online_retail_copy['description'].str.lower()\n",
        "online_retail_copy['description'] = online_retail_copy['description'].str.strip()\n",
        "invalid_desc = ['postage', 'adjustment', 'delivery', 'discount', 'manual']\n",
        "\n",
        "online_retail_valid = online_retail_copy[~online_retail_copy['description'].isin(invalid_desc)]\n",
        "online_retail_valid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "uo1eoPh3Lnf7",
        "outputId": "6be1c64d-ed8a-43ce-83de-0a924d9120af"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "0",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-479c40b8-4df6-4d4d-8f73-fa012f55645b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>622</th>\n",
              "      <td>536414</td>\n",
              "      <td>22139</td>\n",
              "      <td>NaN</td>\n",
              "      <td>56</td>\n",
              "      <td>2010-12-01 11:52:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970</th>\n",
              "      <td>536545</td>\n",
              "      <td>21134</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2010-12-01 14:32:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1971</th>\n",
              "      <td>536546</td>\n",
              "      <td>22145</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2010-12-01 14:33:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1972</th>\n",
              "      <td>536547</td>\n",
              "      <td>37509</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2010-12-01 14:33:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1987</th>\n",
              "      <td>536549</td>\n",
              "      <td>85226</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2010-12-01 14:34:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535322</th>\n",
              "      <td>581199</td>\n",
              "      <td>84581</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-2</td>\n",
              "      <td>2011-12-07 18:26:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535326</th>\n",
              "      <td>581203</td>\n",
              "      <td>23406</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15</td>\n",
              "      <td>2011-12-07 18:31:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535332</th>\n",
              "      <td>581209</td>\n",
              "      <td>21620</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-07 18:35:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>536981</th>\n",
              "      <td>581234</td>\n",
              "      <td>72817</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27</td>\n",
              "      <td>2011-12-08 10:33:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>538554</th>\n",
              "      <td>581408</td>\n",
              "      <td>85175</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20</td>\n",
              "      <td>2011-12-08 14:06:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1455 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-479c40b8-4df6-4d4d-8f73-fa012f55645b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-479c40b8-4df6-4d4d-8f73-fa012f55645b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-479c40b8-4df6-4d4d-8f73-fa012f55645b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-500b8bef-7df7-48f3-a9de-a65961e37b06\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-500b8bef-7df7-48f3-a9de-a65961e37b06')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-500b8bef-7df7-48f3-a9de-a65961e37b06 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       invoice_No stock_code description  quantity        invoice_date  \\\n",
              "622        536414      22139         NaN        56 2010-12-01 11:52:00   \n",
              "1970       536545      21134         NaN         1 2010-12-01 14:32:00   \n",
              "1971       536546      22145         NaN         1 2010-12-01 14:33:00   \n",
              "1972       536547      37509         NaN         1 2010-12-01 14:33:00   \n",
              "1987       536549      85226         NaN         1 2010-12-01 14:34:00   \n",
              "...           ...        ...         ...       ...                 ...   \n",
              "535322     581199      84581         NaN        -2 2011-12-07 18:26:00   \n",
              "535326     581203      23406         NaN        15 2011-12-07 18:31:00   \n",
              "535332     581209      21620         NaN         6 2011-12-07 18:35:00   \n",
              "536981     581234      72817         NaN        27 2011-12-08 10:33:00   \n",
              "538554     581408      85175         NaN        20 2011-12-08 14:06:00   \n",
              "\n",
              "        unit_price  \n",
              "622            0.0  \n",
              "1970           0.0  \n",
              "1971           0.0  \n",
              "1972           0.0  \n",
              "1987           0.0  \n",
              "...            ...  \n",
              "535322         0.0  \n",
              "535326         0.0  \n",
              "535332         0.0  \n",
              "536981         0.0  \n",
              "538554         0.0  \n",
              "\n",
              "[1455 rows x 6 columns]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail_valid[online_retail_valid['description'].isnull()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "InnvERIVHWet"
      },
      "outputs": [],
      "source": [
        "mask_missing_desc = online_retail_valid['description'].isnull() | online_retail_valid['description'].str.strip().eq('')\n",
        "\n",
        "desc_mapping = (\n",
        "    online_retail_valid[~mask_missing_desc].groupby('stock_code')['description']\n",
        "    .agg(lambda x: x.value_counts().idxmax())\n",
        "    .to_dict()\n",
        ")\n",
        "online_retail_valid.loc[mask_missing_desc, 'description'] = online_retail_valid.loc[mask_missing_desc, 'stock_code'].map(desc_mapping)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "yp-MlF0QDYvk",
        "outputId": "769719e7-6e6d-431f-fc99-f6d877f0299a"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"online_retail_valid[online_retail_valid['invoice_No']=='581408']\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"invoice_No\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"581408\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stock_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"85175\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"cacti t-light candles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 20,\n        \"max\": 20,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"invoice_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-12-08 14:06:00\",\n        \"max\": \"2011-12-08 14:06:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2011-12-08 14:06:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-4d080b3c-bee9-40aa-bd25-4ea9678a109e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>538554</th>\n",
              "      <td>581408</td>\n",
              "      <td>85175</td>\n",
              "      <td>cacti t-light candles</td>\n",
              "      <td>20</td>\n",
              "      <td>2011-12-08 14:06:00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d080b3c-bee9-40aa-bd25-4ea9678a109e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4d080b3c-bee9-40aa-bd25-4ea9678a109e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4d080b3c-bee9-40aa-bd25-4ea9678a109e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       invoice_No stock_code            description  quantity  \\\n",
              "538554     581408      85175  cacti t-light candles        20   \n",
              "\n",
              "              invoice_date  unit_price  \n",
              "538554 2011-12-08 14:06:00         0.0  "
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail_valid[online_retail_valid['invoice_No']=='581408']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "du0hnCooDYx6",
        "outputId": "54436493-5dc2-4467-8e8f-7103dd8297da"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 539990 entries, 0 to 541908\n",
            "Data columns (total 6 columns):\n",
            " #   Column        Non-Null Count   Dtype         \n",
            "---  ------        --------------   -----         \n",
            " 0   invoice_No    539990 non-null  object        \n",
            " 1   stock_code    539990 non-null  object        \n",
            " 2   description   539899 non-null  object        \n",
            " 3   quantity      539990 non-null  int64         \n",
            " 4   invoice_date  539990 non-null  datetime64[ns]\n",
            " 5   unit_price    539990 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(1), int64(1), object(3)\n",
            "memory usage: 28.8+ MB\n"
          ]
        }
      ],
      "source": [
        "online_retail_valid.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rqV6MpqtDY1h",
        "outputId": "43f1f601-0ba0-4f41-8c93-a9b8e0cb1cf5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 539899 entries, 0 to 539898\n",
            "Data columns (total 6 columns):\n",
            " #   Column        Non-Null Count   Dtype         \n",
            "---  ------        --------------   -----         \n",
            " 0   invoice_No    539899 non-null  object        \n",
            " 1   stock_code    539899 non-null  object        \n",
            " 2   description   539899 non-null  object        \n",
            " 3   quantity      539899 non-null  int64         \n",
            " 4   invoice_date  539899 non-null  datetime64[ns]\n",
            " 5   unit_price    539899 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(1), int64(1), object(3)\n",
            "memory usage: 24.7+ MB\n"
          ]
        }
      ],
      "source": [
        "online_retail_valid= online_retail_valid.dropna(subset=['description']).reset_index(drop=True)\n",
        "online_retail_valid.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "H0BdCsZ3QRS3",
        "outputId": "5dd7b44e-2810-42df-e9d0-ffc45c423e22"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "online_retail_valid"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-bc42ae45-7b5e-4070-a018-b285c3120f4d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>stock_code</th>\n",
              "      <th>description</th>\n",
              "      <th>quantity</th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>unit_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123</td>\n",
              "      <td>white hanging heart t-light holder</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>white metal lantern</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406</td>\n",
              "      <td>cream cupid hearts coat hanger</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>knitted union flag hot water bottle</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029</td>\n",
              "      <td>red woolly hottie white heart.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539894</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>pack of 20 spaceboy napkins</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539895</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>children's apron dolly girl</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>2.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539896</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>childrens cutlery dolly girl</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539897</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>childrens cutlery circus parade</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539898</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>baking set 9 piece retrospot</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>529805 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc42ae45-7b5e-4070-a018-b285c3120f4d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc42ae45-7b5e-4070-a018-b285c3120f4d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc42ae45-7b5e-4070-a018-b285c3120f4d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-54238642-cb86-4e53-b486-6e0bfb35f17f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54238642-cb86-4e53-b486-6e0bfb35f17f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-54238642-cb86-4e53-b486-6e0bfb35f17f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_cc5176b1-3bbb-4676-800c-398d57cd6f19\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('online_retail_valid')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cc5176b1-3bbb-4676-800c-398d57cd6f19 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('online_retail_valid');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       invoice_No stock_code                          description  quantity  \\\n",
              "0          536365      85123   white hanging heart t-light holder         6   \n",
              "1          536365      71053                  white metal lantern         6   \n",
              "2          536365      84406       cream cupid hearts coat hanger         8   \n",
              "3          536365      84029  knitted union flag hot water bottle         6   \n",
              "4          536365      84029       red woolly hottie white heart.         6   \n",
              "...           ...        ...                                  ...       ...   \n",
              "539894     581587      22613          pack of 20 spaceboy napkins        12   \n",
              "539895     581587      22899          children's apron dolly girl         6   \n",
              "539896     581587      23254         childrens cutlery dolly girl         4   \n",
              "539897     581587      23255      childrens cutlery circus parade         4   \n",
              "539898     581587      22138         baking set 9 piece retrospot         3   \n",
              "\n",
              "              invoice_date  unit_price  \n",
              "0      2010-12-01 08:26:00        2.55  \n",
              "1      2010-12-01 08:26:00        3.39  \n",
              "2      2010-12-01 08:26:00        2.75  \n",
              "3      2010-12-01 08:26:00        3.39  \n",
              "4      2010-12-01 08:26:00        3.39  \n",
              "...                    ...         ...  \n",
              "539894 2011-12-09 12:50:00        0.85  \n",
              "539895 2011-12-09 12:50:00        2.10  \n",
              "539896 2011-12-09 12:50:00        4.15  \n",
              "539897 2011-12-09 12:50:00        4.15  \n",
              "539898 2011-12-09 12:50:00        4.95  \n",
              "\n",
              "[529805 rows x 6 columns]"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "online_retail_valid = online_retail_valid[online_retail_valid['quantity']>0]\n",
        "online_retail_valid"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y_mzdn890gPe"
      },
      "source": [
        "### Section 1\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "q6zNOpLbzlO7",
        "outputId": "36b9ad68-f4c1-4588-9cf2-e37afd3709f5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"basket\",\n  \"rows\": 20584,\n  \"fields\": [\n    {\n      \"column\": \"invoice_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 08:26:00\",\n        \"max\": \"2011-12-09 12:50:00\",\n        \"num_unique_values\": 18896,\n        \"samples\": [\n          \"2011-10-27 15:24:00\",\n          \"2011-08-12 11:07:00\",\n          \"2011-05-06 08:19:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"invoice_No\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20542,\n        \"samples\": [\n          \"560996\",\n          \"575854\",\n          \"571314\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"products\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "basket"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-373e7ec0-2a87-437b-8769-aca1056fc20c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>invoice_date</th>\n",
              "      <th>invoice_No</th>\n",
              "      <th>products</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>536365</td>\n",
              "      <td>[white hanging heart t-light holder, white met...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2010-12-01 08:28:00</td>\n",
              "      <td>536366</td>\n",
              "      <td>[hand warmer red polka dot, hand warmer union ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2010-12-01 08:34:00</td>\n",
              "      <td>536367</td>\n",
              "      <td>[poppy's playhouse kitchen, box of vintage jig...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2010-12-01 08:34:00</td>\n",
              "      <td>536368</td>\n",
              "      <td>[jam making set with jars, red coat rack paris...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2010-12-01 08:35:00</td>\n",
              "      <td>536369</td>\n",
              "      <td>[bath building block word]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20579</th>\n",
              "      <td>2011-12-09 12:23:00</td>\n",
              "      <td>581583</td>\n",
              "      <td>[lunch bag red retrospot, 6 chocolate love hea...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20580</th>\n",
              "      <td>2011-12-09 12:25:00</td>\n",
              "      <td>581584</td>\n",
              "      <td>[red flock love heart photo frame, 6 chocolate...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20581</th>\n",
              "      <td>2011-12-09 12:31:00</td>\n",
              "      <td>581585</td>\n",
              "      <td>[zinc t-light holder star large, black tea tow...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20582</th>\n",
              "      <td>2011-12-09 12:49:00</td>\n",
              "      <td>581586</td>\n",
              "      <td>[large cake stand  hanging strawbery, set of 3...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20583</th>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>581587</td>\n",
              "      <td>[circus parade lunch box, childrens cutlery do...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20584 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-373e7ec0-2a87-437b-8769-aca1056fc20c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-373e7ec0-2a87-437b-8769-aca1056fc20c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-373e7ec0-2a87-437b-8769-aca1056fc20c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d370c28a-ffcc-4212-9c66-5f7a7f8f7766\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d370c28a-ffcc-4212-9c66-5f7a7f8f7766')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d370c28a-ffcc-4212-9c66-5f7a7f8f7766 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1c503179-1e4d-4c94-bd92-b90ea83b0a20\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('basket')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1c503179-1e4d-4c94-bd92-b90ea83b0a20 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('basket');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "             invoice_date invoice_No  \\\n",
              "0     2010-12-01 08:26:00     536365   \n",
              "1     2010-12-01 08:28:00     536366   \n",
              "2     2010-12-01 08:34:00     536367   \n",
              "3     2010-12-01 08:34:00     536368   \n",
              "4     2010-12-01 08:35:00     536369   \n",
              "...                   ...        ...   \n",
              "20579 2011-12-09 12:23:00     581583   \n",
              "20580 2011-12-09 12:25:00     581584   \n",
              "20581 2011-12-09 12:31:00     581585   \n",
              "20582 2011-12-09 12:49:00     581586   \n",
              "20583 2011-12-09 12:50:00     581587   \n",
              "\n",
              "                                                products  \n",
              "0      [white hanging heart t-light holder, white met...  \n",
              "1      [hand warmer red polka dot, hand warmer union ...  \n",
              "2      [poppy's playhouse kitchen, box of vintage jig...  \n",
              "3      [jam making set with jars, red coat rack paris...  \n",
              "4                             [bath building block word]  \n",
              "...                                                  ...  \n",
              "20579  [lunch bag red retrospot, 6 chocolate love hea...  \n",
              "20580  [red flock love heart photo frame, 6 chocolate...  \n",
              "20581  [zinc t-light holder star large, black tea tow...  \n",
              "20582  [large cake stand  hanging strawbery, set of 3...  \n",
              "20583  [circus parade lunch box, childrens cutlery do...  \n",
              "\n",
              "[20584 rows x 3 columns]"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# First we create purchases and put the items purchased together for a single cart.\n",
        "basket = online_retail_valid.groupby(['invoice_No', 'invoice_date'])['description'].apply(lambda x: list(set(x))).reset_index(name='products').reindex(columns=['invoice_date', 'invoice_No', 'products'])\n",
        "basket"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PoFkE4Ptz5k-"
      },
      "outputs": [],
      "source": [
        "from mlxtend.frequent_patterns import apriori"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L8XY5rtM6M_8"
      },
      "outputs": [],
      "source": [
        "partitions = np.array_split(basket, 4)\n",
        "\n",
        "# 2. تابع کمکی برای one-hot encoding و Apriori در هر پارتیشن\n",
        "def get_local_freq(df_part, min_support=0.5):\n",
        "    # تبدیل لیست کالاها به ماتریس یک‌گره‌ای\n",
        "    ohe = df_part['products'].str.join('|').str.get_dummies('|')\n",
        "    # اجرای Apriori\n",
        "    return apriori(ohe, min_support=min_support, use_colnames=True)\n",
        "\n",
        "# استخراج آیتم‌ست‌های مکرر محلی\n",
        "local_freq_list = [get_local_freq(p, min_support=0.0005) for p in partitions]\n",
        "local_freq_list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jDNHhV-j0SSi"
      },
      "outputs": [],
      "source": [
        "# 3. ادغام همه‌ی آیتم‌ست‌های مکرر محلی برای ساخت نامزدهای کلی\n",
        "candidates = pd.concat(local_freq_list)['itemsets'].drop_duplicates().tolist()\n",
        "\n",
        "# 4. اسکن نهایی: شمارش نامزدها روی کل داده\n",
        "ohe_full = basket['products'].str.join('|').str.get_dummies('|')\n",
        "# محاسبه‌ی فرکانس واقعی نامزدها\n",
        "global_counts = []\n",
        "n_transactions = len(basket)\n",
        "for itemset in candidates:\n",
        "    mask = ohe_full[list(itemset)].all(axis=1)\n",
        "    support = mask.sum() / n_transactions\n",
        "    if support >= 0.0005:\n",
        "        global_counts.append((frozenset(itemset), support))\n",
        "\n",
        "# تبدیل به DataFrame\n",
        "freq_itemsets = pd.DataFrame(global_counts, columns=['itemset','support']) \\\n",
        "                  .sort_values('support', ascending=False).reset_index(drop=True)\n",
        "\n",
        "print(freq_itemsets)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqod7VGTNoeI"
      },
      "source": [
        "### Section 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "od4BbF84Lwhv"
      },
      "outputs": [],
      "source": [
        "from mlxtend.frequent_patterns import association_rules"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oVAIfxakPbpx",
        "outputId": "fc2256e7-143a-4c4a-89c8-7157b10144a7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Empty DataFrame\n",
            "Columns: [antecedents, consequents, support, confidence, lift]\n",
            "Index: []\n"
          ]
        }
      ],
      "source": [
        "# تغییر نام ستون itemset به itemsets\n",
        "freq_itemsets = freq_itemsets.rename(columns={'itemset': 'itemsets'})\n",
        "\n",
        "# حالا می‌توانیم قواعد انجمنی را استخراج کنیم\n",
        "rules = association_rules(freq_itemsets, metric=\"confidence\", min_threshold=0.0005)\n",
        "\n",
        "# مرتب‌سازی و نمایش\n",
        "rules = rules.sort_values(['confidence', 'lift'], ascending=[False, False]).reset_index(drop=True)\n",
        "print(rules[['antecedents','consequents','support','confidence','lift']])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fWnStKzONtDN"
      },
      "source": [
        "### Section 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OhkMPGGmOMcg",
        "outputId": "b24ca346-68ad-455b-c6dd-2db3bbc2642f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Top 5 itemsets by support:\n",
            "Empty DataFrame\n",
            "Columns: [itemsets, support]\n",
            "Index: []\n"
          ]
        }
      ],
      "source": [
        "# 1) برترین آیتم‌ست‌ها بر اساس support (اندازه ≥ 2)\n",
        "top_by_support = (freq_itemsets[\n",
        "                    freq_itemsets['itemsets'].apply(lambda s: len(s) >= 2)]\n",
        "                  .sort_values('support', ascending=False)\n",
        "                  .head(5))\n",
        "print(\"Top 5 itemsets by support:\")\n",
        "print(top_by_support)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oPgzk98RU-4D",
        "outputId": "af0454f4-b5c1-4fa8-c829-f4a71c437d6c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Top 5 association rules by lift:\n",
            "Empty DataFrame\n",
            "Columns: [antecedents, consequents, support, confidence, lift]\n",
            "Index: []\n"
          ]
        }
      ],
      "source": [
        "# 2) برترین قوانین بر اساس lift\n",
        "top_by_lift = (rules[\n",
        "                 rules['antecedents'].apply(lambda s: len(s) >= 1) &\n",
        "                 rules['consequents'].apply(lambda s: len(s) >= 1)]\n",
        "               .sort_values('lift', ascending=False)\n",
        "               .head(5)[['antecedents','consequents','support','confidence','lift']])\n",
        "print(\"\\nTop 5 association rules by lift:\")\n",
        "print(top_by_lift)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "INkOlL-iVB2s",
        "outputId": "689d78e5-e2fd-48d3-ef34-b1e74d3766c7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Bundle suggestions (from top rules):\n"
          ]
        }
      ],
      "source": [
        "# 3) استخراج پیشنهاد ترکیب تخفیف گروهی\n",
        "#   می‌توانیم از top_by_support یا ترکیب های antecedent+consequent در top_by_lift استفاده کنیم\n",
        "bundle_suggestions = []\n",
        "for _, row in top_by_lift.iterrows():\n",
        "    combo = set(row['antecedents']) | set(row['consequents'])\n",
        "    bundle_suggestions.append((frozenset(combo), row['lift'], row['confidence']))\n",
        "\n",
        "print(\"\\nBundle suggestions (from top rules):\")\n",
        "for combo, lift, conf in bundle_suggestions:\n",
        "    print(f\"{set(combo)}  →  lift={lift:.2f}, confidence={conf:.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jRyydqxLU20Y"
      },
      "source": [
        "### Section 4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g8SgZ9ajOMgF",
        "outputId": "af31945f-e69e-42cd-a68f-91e9eb3eff7c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/numpy/_core/fromnumeric.py:57: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.\n",
            "  return bound(*args, **kwds)\n",
            "/usr/local/lib/python3.11/dist-packages/mlxtend/frequent_patterns/fpcommon.py:161: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "basket['weekday'] = pd.to_datetime(basket['invoice_date']).dt.weekday\n",
        "ohe_full= basket['products'].str.join('|').str.get_dummies('|')\n",
        "weekend_mask = basket['weekday'].isin([5,6])\n",
        "weekday_mask = ~weekend_mask\n",
        "\n",
        "b_parts = np.array_split(basket, 4)\n",
        "o_parts = np.array_split(ohe_full, 4)\n",
        "\n",
        "local_wknd = []\n",
        "local_wkdy = []\n",
        "\n",
        "for b, o in zip(b_parts, o_parts):\n",
        "    m_wknd = b['weekday'].isin([5,6])\n",
        "    wknd_sets = apriori(o[m_wknd], min_support=0.0005, use_colnames=True, max_len=2)['itemsets']\n",
        "    wkdy_sets = apriori(o[~m_wknd], min_support=0.0005, use_colnames=True, max_len=2)['itemsets']\n",
        "    local_wknd.append({frozenset(s) for s in wknd_sets if len(s)==2})\n",
        "    local_wkdy.append({frozenset(s) for s in wkdy_sets if len(s)==2})\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "clk8HC6BVIJn",
        "outputId": "8c28a155-5816-4da4-b8c0-ebaebb1e74fd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "جفت‌های منحصراً آخر هفته:\n",
            "{'wooden frame antique white', 'wooden picture frame white finish'}\n"
          ]
        }
      ],
      "source": [
        "# 3) ادغام نامزدهای کلی\n",
        "cand_wknd = set.union(*local_wknd)\n",
        "cand_wkdy = set.union(*local_wkdy)\n",
        "\n",
        "# 4) شمارش نهاییِ support روی کل داده\n",
        "n_wknd = weekend_mask.sum()\n",
        "n_wkdy = weekday_mask.sum()\n",
        "\n",
        "global_wknd = {\n",
        "    p for p in cand_wknd\n",
        "    if (ohe_full[list(p)][weekend_mask].all(axis=1).sum() / n_wknd) >= 0.0005\n",
        "}\n",
        "global_wkdy = {\n",
        "    p for p in cand_wkdy\n",
        "    if (ohe_full[list(p)][weekday_mask].all(axis=1).sum() / n_wkdy) >= 0.0005\n",
        "}\n",
        "\n",
        "# 5) جفت‌های منحصراً آخر هفته\n",
        "unique_weekend_pairs = global_wknd - global_wkdy\n",
        "\n",
        "print(\"جفت‌های منحصراً آخر هفته:\")\n",
        "for p in unique_weekend_pairs:\n",
        "    print(set(p))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0kQZwYhoOMwR"
      },
      "source": [
        "## Question 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "AdBmp75YOMaG",
        "outputId": "b0820f0b-db41-4a98-981c-d579617a3a48"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"weather_history\",\n  \"rows\": 96453,\n  \"fields\": [\n    {\n      \"column\": \"Formatted Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 96429,\n        \"samples\": [\n          \"2008-10-17 17:00:00.000 +0200\",\n          \"2014-11-02 03:00:00.000 +0100\",\n          \"2008-06-18 01:00:00.000 +0200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Summary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Humid and Mostly Cloudy\",\n          \"Windy and Partly Cloudy\",\n          \"Humid and Partly Cloudy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precip Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"snow\",\n          \"rain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551546320656923,\n        \"min\": -21.822222222222223,\n        \"max\": 39.90555555555555,\n        \"num_unique_values\": 7574,\n        \"samples\": [\n          34.8111111111111,\n          14.955555555555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Apparent Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.696847392119263,\n        \"min\": -27.716666666666665,\n        \"max\": 39.34444444444444,\n        \"num_unique_values\": 8984,\n        \"samples\": [\n          32.01111111111111,\n          3.1611111111111097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19547273906722662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          0.81,\n          0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (km/h)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.9135710125921515,\n        \"min\": 0.0,\n        \"max\": 63.8526,\n        \"num_unique_values\": 2484,\n        \"samples\": [\n          23.3611,\n          33.1016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Bearing (degrees)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.38342838070538,\n        \"min\": 0.0,\n        \"max\": 359.0,\n        \"num_unique_values\": 360,\n        \"samples\": [\n          128.0,\n          15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visibility (km)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.192123191422925,\n        \"min\": 0.0,\n        \"max\": 16.1,\n        \"num_unique_values\": 949,\n        \"samples\": [\n          4.395300000000001,\n          6.6332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loud Cover\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure (millibars)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.96990568258147,\n        \"min\": 0.0,\n        \"max\": 1046.38,\n        \"num_unique_values\": 4979,\n        \"samples\": [\n          987.38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Daily Summary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 214,\n        \"samples\": [\n          \"Partly cloudy until evening.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "weather_history"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d1be6cba-378b-4fed-9aba-52abe6c7c019\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Formatted Date</th>\n",
              "      <th>Summary</th>\n",
              "      <th>Precip Type</th>\n",
              "      <th>Temperature (C)</th>\n",
              "      <th>Apparent Temperature (C)</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Wind Speed (km/h)</th>\n",
              "      <th>Wind Bearing (degrees)</th>\n",
              "      <th>Visibility (km)</th>\n",
              "      <th>Loud Cover</th>\n",
              "      <th>Pressure (millibars)</th>\n",
              "      <th>Daily Summary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2006-04-01 00:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.472222</td>\n",
              "      <td>7.388889</td>\n",
              "      <td>0.89</td>\n",
              "      <td>14.1197</td>\n",
              "      <td>251.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.13</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2006-04-01 01:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.355556</td>\n",
              "      <td>7.227778</td>\n",
              "      <td>0.86</td>\n",
              "      <td>14.2646</td>\n",
              "      <td>259.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.63</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2006-04-01 02:00:00.000 +0200</td>\n",
              "      <td>Mostly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.377778</td>\n",
              "      <td>9.377778</td>\n",
              "      <td>0.89</td>\n",
              "      <td>3.9284</td>\n",
              "      <td>204.0</td>\n",
              "      <td>14.9569</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.94</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2006-04-01 03:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>8.288889</td>\n",
              "      <td>5.944444</td>\n",
              "      <td>0.83</td>\n",
              "      <td>14.1036</td>\n",
              "      <td>269.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.41</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2006-04-01 04:00:00.000 +0200</td>\n",
              "      <td>Mostly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>8.755556</td>\n",
              "      <td>6.977778</td>\n",
              "      <td>0.83</td>\n",
              "      <td>11.0446</td>\n",
              "      <td>259.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.51</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1be6cba-378b-4fed-9aba-52abe6c7c019')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d1be6cba-378b-4fed-9aba-52abe6c7c019 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d1be6cba-378b-4fed-9aba-52abe6c7c019');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fbc04c65-721b-40f5-a97d-f1933edbd5ec\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fbc04c65-721b-40f5-a97d-f1933edbd5ec')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fbc04c65-721b-40f5-a97d-f1933edbd5ec button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                  Formatted Date        Summary Precip Type  Temperature (C)  \\\n",
              "0  2006-04-01 00:00:00.000 +0200  Partly Cloudy        rain         9.472222   \n",
              "1  2006-04-01 01:00:00.000 +0200  Partly Cloudy        rain         9.355556   \n",
              "2  2006-04-01 02:00:00.000 +0200  Mostly Cloudy        rain         9.377778   \n",
              "3  2006-04-01 03:00:00.000 +0200  Partly Cloudy        rain         8.288889   \n",
              "4  2006-04-01 04:00:00.000 +0200  Mostly Cloudy        rain         8.755556   \n",
              "\n",
              "   Apparent Temperature (C)  Humidity  Wind Speed (km/h)  \\\n",
              "0                  7.388889      0.89            14.1197   \n",
              "1                  7.227778      0.86            14.2646   \n",
              "2                  9.377778      0.89             3.9284   \n",
              "3                  5.944444      0.83            14.1036   \n",
              "4                  6.977778      0.83            11.0446   \n",
              "\n",
              "   Wind Bearing (degrees)  Visibility (km)  Loud Cover  Pressure (millibars)  \\\n",
              "0                   251.0          15.8263         0.0               1015.13   \n",
              "1                   259.0          15.8263         0.0               1015.63   \n",
              "2                   204.0          14.9569         0.0               1015.94   \n",
              "3                   269.0          15.8263         0.0               1016.41   \n",
              "4                   259.0          15.8263         0.0               1016.51   \n",
              "\n",
              "                       Daily Summary  \n",
              "0  Partly cloudy throughout the day.  \n",
              "1  Partly cloudy throughout the day.  \n",
              "2  Partly cloudy throughout the day.  \n",
              "3  Partly cloudy throughout the day.  \n",
              "4  Partly cloudy throughout the day.  "
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "weather_history = pd.read_csv('weatherHistory.csv')\n",
        "weather_history.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kk4yycVkbM_w",
        "outputId": "32eb1e1a-0677-4f0a-98aa-3305605dac97"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 96453 entries, 0 to 96452\n",
            "Data columns (total 12 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Formatted Date            96453 non-null  object \n",
            " 1   Summary                   96453 non-null  object \n",
            " 2   Precip Type               95936 non-null  object \n",
            " 3   Temperature (C)           96453 non-null  float64\n",
            " 4   Apparent Temperature (C)  96453 non-null  float64\n",
            " 5   Humidity                  96453 non-null  float64\n",
            " 6   Wind Speed (km/h)         96453 non-null  float64\n",
            " 7   Wind Bearing (degrees)    96453 non-null  float64\n",
            " 8   Visibility (km)           96453 non-null  float64\n",
            " 9   Loud Cover                96453 non-null  float64\n",
            " 10  Pressure (millibars)      96453 non-null  float64\n",
            " 11  Daily Summary             96453 non-null  object \n",
            "dtypes: float64(8), object(4)\n",
            "memory usage: 8.8+ MB\n"
          ]
        }
      ],
      "source": [
        "weather_history.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "jpZbcpaQbNFv",
        "outputId": "295767fc-5416-4536-bc90-0018c6067a1c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"weather_history\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34097.49652210907,\n        \"min\": -21.822222222222223,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.93267843751188,\n          12.0,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Apparent Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34097.94010764084,\n        \"min\": -27.716666666666665,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.855028874166694,\n          12.0,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34101.07303379882,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7348989663359355,\n          0.78,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (km/h)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34095.65910657795,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.810640140793963,\n          9.9659,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Bearing (degrees)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34038.84142177506,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          187.50923247592092,\n          180.0,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visibility (km)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34098.0612960192,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.347324929240148,\n          10.0464,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loud Cover\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34101.285182893036,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          96453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure (millibars)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33840.639492844624,\n        \"min\": 0.0,\n        \"max\": 96453.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1003.2359558541468,\n          1016.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-330bd73e-43bc-4ada-862d-ae700042f015\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Temperature (C)</th>\n",
              "      <th>Apparent Temperature (C)</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Wind Speed (km/h)</th>\n",
              "      <th>Wind Bearing (degrees)</th>\n",
              "      <th>Visibility (km)</th>\n",
              "      <th>Loud Cover</th>\n",
              "      <th>Pressure (millibars)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.000000</td>\n",
              "      <td>96453.0</td>\n",
              "      <td>96453.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>11.932678</td>\n",
              "      <td>10.855029</td>\n",
              "      <td>0.734899</td>\n",
              "      <td>10.810640</td>\n",
              "      <td>187.509232</td>\n",
              "      <td>10.347325</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1003.235956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.551546</td>\n",
              "      <td>10.696847</td>\n",
              "      <td>0.195473</td>\n",
              "      <td>6.913571</td>\n",
              "      <td>107.383428</td>\n",
              "      <td>4.192123</td>\n",
              "      <td>0.0</td>\n",
              "      <td>116.969906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-21.822222</td>\n",
              "      <td>-27.716667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>4.688889</td>\n",
              "      <td>2.311111</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>5.828200</td>\n",
              "      <td>116.000000</td>\n",
              "      <td>8.339800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1011.900000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.780000</td>\n",
              "      <td>9.965900</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>10.046400</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>18.838889</td>\n",
              "      <td>18.838889</td>\n",
              "      <td>0.890000</td>\n",
              "      <td>14.135800</td>\n",
              "      <td>290.000000</td>\n",
              "      <td>14.812000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1021.090000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>39.905556</td>\n",
              "      <td>39.344444</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>63.852600</td>\n",
              "      <td>359.000000</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1046.380000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-330bd73e-43bc-4ada-862d-ae700042f015')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-330bd73e-43bc-4ada-862d-ae700042f015 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-330bd73e-43bc-4ada-862d-ae700042f015');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d710d1df-06e7-4c0e-bb70-b114fc4cb971\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d710d1df-06e7-4c0e-bb70-b114fc4cb971')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d710d1df-06e7-4c0e-bb70-b114fc4cb971 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       Temperature (C)  Apparent Temperature (C)      Humidity  \\\n",
              "count     96453.000000              96453.000000  96453.000000   \n",
              "mean         11.932678                 10.855029      0.734899   \n",
              "std           9.551546                 10.696847      0.195473   \n",
              "min         -21.822222                -27.716667      0.000000   \n",
              "25%           4.688889                  2.311111      0.600000   \n",
              "50%          12.000000                 12.000000      0.780000   \n",
              "75%          18.838889                 18.838889      0.890000   \n",
              "max          39.905556                 39.344444      1.000000   \n",
              "\n",
              "       Wind Speed (km/h)  Wind Bearing (degrees)  Visibility (km)  Loud Cover  \\\n",
              "count       96453.000000            96453.000000     96453.000000     96453.0   \n",
              "mean           10.810640              187.509232        10.347325         0.0   \n",
              "std             6.913571              107.383428         4.192123         0.0   \n",
              "min             0.000000                0.000000         0.000000         0.0   \n",
              "25%             5.828200              116.000000         8.339800         0.0   \n",
              "50%             9.965900              180.000000        10.046400         0.0   \n",
              "75%            14.135800              290.000000        14.812000         0.0   \n",
              "max            63.852600              359.000000        16.100000         0.0   \n",
              "\n",
              "       Pressure (millibars)  \n",
              "count          96453.000000  \n",
              "mean            1003.235956  \n",
              "std              116.969906  \n",
              "min                0.000000  \n",
              "25%             1011.900000  \n",
              "50%             1016.450000  \n",
              "75%             1021.090000  \n",
              "max             1046.380000  "
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "weather_history.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X9fYkK0ONKTX"
      },
      "outputs": [],
      "source": [
        "from mlxtend.preprocessing import TransactionEncoder\n",
        "from mlxtend.frequent_patterns import fpgrowth"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1oCYvn74VUW3"
      },
      "source": [
        "### Section 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MZcmjSK0PRlV"
      },
      "outputs": [],
      "source": [
        "weather_history_q1 = weather_history.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9-EmDho_bNIc"
      },
      "outputs": [],
      "source": [
        "weather_history_q1['high_temp'] = weather_history_q1['Temperature (C)'] >= 30    # دمای ≥ 30°C\n",
        "weather_history_q1['high_hum']  = weather_history_q1['Humidity'] >= 0.8           # رطوبت ≥ 80%"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5mbmSnLsbNKk",
        "outputId": "aaca3ae3-fade-499f-93f8-7f6870dad6ce"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " ['high_temp'],\n",
              " [],\n",
              " [],\n",
              " ['high_hum'],\n",
              " [],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " ['high_hum'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ...]"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "transactions = weather_history_q1.apply(\n",
        "    lambda row: ['high_temp'] if row['high_temp'] else []\n",
        "                + ['high_hum']  if row['high_hum']  else [],\n",
        "    axis=1\n",
        ").tolist()\n",
        "transactions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MiFFPn9tbNN-",
        "outputId": "5c813caf-6145-47f9-9b6b-37eb5cc66762"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "    support     itemsets\n",
            "0  0.477279   (high_hum)\n",
            "1  0.028688  (high_temp)\n"
          ]
        }
      ],
      "source": [
        "te = TransactionEncoder()\n",
        "te_ary = te.fit(transactions).transform(transactions)\n",
        "weather_history_te = pd.DataFrame(te_ary, columns=te.columns_)\n",
        "\n",
        "# 5. اجرای الگوریتم FPGrowth با آستانه حمایت ۱٪\n",
        "frequent_itemsets = fpgrowth(weather_history_te, min_support=0.002, use_colnames=True)\n",
        "\n",
        "# 6. چاپ نتایج\n",
        "print(frequent_itemsets)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fUIEvLCMOj3Q"
      },
      "source": [
        "### Section 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kfFeIKVWPjfQ"
      },
      "outputs": [],
      "source": [
        "weather_history_q2 = weather_history.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IVNW4bHlOQVN",
        "outputId": "7d1eebd0-4207-4898-d12d-65d25ca7e73f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Breezy and Mostly Cloudy', 'rain'],\n",
              " ['Breezy and Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Foggy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Clear', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Overcast', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Partly Cloudy', 'rain'],\n",
              " ['Mostly Cloudy', 'rain'],\n",
              " ...]"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "def make_transaction(row):\n",
        "    items = []\n",
        "    items.append(str(row['Summary']))\n",
        "    if pd.notna(row['Precip Type']):\n",
        "        items.append(str(row['Precip Type']))\n",
        "    return items\n",
        "\n",
        "transactions_q2 = weather_history_q2.apply(make_transaction, axis=1).tolist()\n",
        "\n",
        "transactions_q2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pcuv1rSQOl_C"
      },
      "outputs": [],
      "source": [
        "te_q2 = TransactionEncoder()\n",
        "te_ary_q2 = te_q2.fit(transactions_q2).transform(transactions_q2)\n",
        "weather_history_te_q2 = pd.DataFrame(te_ary_q2, columns=te_q2.columns_)\n",
        "\n",
        "# 4. اجرای FPGrowth با حداقل حمایت 0.2\n",
        "min_support = 0.002\n",
        "frequent_itemsets_q2 = fpgrowth(weather_history_te_q2, min_support=min_support, use_colnames=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "S8kug1VYOmA4",
        "outputId": "e022afbe-5f9c-4ddf-d804-6e2a6e5fd4c1"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"frequent_itemsets_q2\",\n  \"rows\": 23,\n  \"fields\": [\n    {\n      \"column\": \"support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19685702329468818,\n        \"min\": 0.003929374928721761,\n        \"max\": 0.8835806040247581,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.0050801944988751,\n          0.11105927239173484,\n          0.8835806040247581\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"itemsets\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"frozenset({'Breezy and Mostly Cloudy', 'rain'})\",\n          \"frozenset({'snow'})\",\n          \"frozenset({'rain'})\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "frequent_itemsets_q2"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-61bdb759-1761-42b3-87ea-d4559af416d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>support</th>\n",
              "      <th>itemsets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.883581</td>\n",
              "      <td>(rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.329000</td>\n",
              "      <td>(Partly Cloudy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.291271</td>\n",
              "      <td>(Mostly Cloudy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.172073</td>\n",
              "      <td>(Overcast)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.074109</td>\n",
              "      <td>(Foggy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.005350</td>\n",
              "      <td>(Breezy and Mostly Cloudy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.112905</td>\n",
              "      <td>(Clear)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.004002</td>\n",
              "      <td>(Breezy and Partly Cloudy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.005474</td>\n",
              "      <td>(Breezy and Overcast)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.111059</td>\n",
              "      <td>(snow)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.310151</td>\n",
              "      <td>(Partly Cloudy, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.269852</td>\n",
              "      <td>(Mostly Cloudy, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.144278</td>\n",
              "      <td>(Overcast, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.042871</td>\n",
              "      <td>(Foggy, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.030917</td>\n",
              "      <td>(snow, Foggy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.005080</td>\n",
              "      <td>(Breezy and Mostly Cloudy, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.097156</td>\n",
              "      <td>(Clear, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.003929</td>\n",
              "      <td>(Breezy and Partly Cloudy, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.004894</td>\n",
              "      <td>(Breezy and Overcast, rain)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.026956</td>\n",
              "      <td>(Overcast, snow)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.014432</td>\n",
              "      <td>(snow, Clear)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.019554</td>\n",
              "      <td>(snow, Mostly Cloudy)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0.017833</td>\n",
              "      <td>(snow, Partly Cloudy)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-61bdb759-1761-42b3-87ea-d4559af416d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-61bdb759-1761-42b3-87ea-d4559af416d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-61bdb759-1761-42b3-87ea-d4559af416d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-afdc7189-3adb-4136-950f-fd6fb706a042\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-afdc7189-3adb-4136-950f-fd6fb706a042')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-afdc7189-3adb-4136-950f-fd6fb706a042 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f16e5888-f842-4b5b-b379-7277360d885c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('frequent_itemsets_q2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f16e5888-f842-4b5b-b379-7277360d885c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('frequent_itemsets_q2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     support                          itemsets\n",
              "0   0.883581                            (rain)\n",
              "1   0.329000                   (Partly Cloudy)\n",
              "2   0.291271                   (Mostly Cloudy)\n",
              "3   0.172073                        (Overcast)\n",
              "4   0.074109                           (Foggy)\n",
              "5   0.005350        (Breezy and Mostly Cloudy)\n",
              "6   0.112905                           (Clear)\n",
              "7   0.004002        (Breezy and Partly Cloudy)\n",
              "8   0.005474             (Breezy and Overcast)\n",
              "9   0.111059                            (snow)\n",
              "10  0.310151             (Partly Cloudy, rain)\n",
              "11  0.269852             (Mostly Cloudy, rain)\n",
              "12  0.144278                  (Overcast, rain)\n",
              "13  0.042871                     (Foggy, rain)\n",
              "14  0.030917                     (snow, Foggy)\n",
              "15  0.005080  (Breezy and Mostly Cloudy, rain)\n",
              "16  0.097156                     (Clear, rain)\n",
              "17  0.003929  (Breezy and Partly Cloudy, rain)\n",
              "18  0.004894       (Breezy and Overcast, rain)\n",
              "19  0.026956                  (Overcast, snow)\n",
              "20  0.014432                     (snow, Clear)\n",
              "21  0.019554             (snow, Mostly Cloudy)\n",
              "22  0.017833             (snow, Partly Cloudy)"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "frequent_itemsets_q2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YMX58kwAK-7Y"
      },
      "source": [
        "## Question 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Y5tFQ5_LG-W"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from scipy.stats import chi2_contingency"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RxRqJKUXa6sk"
      },
      "outputs": [],
      "source": [
        "item_tid = {\n",
        "    'T1': {101, 203, 305, 407, 509, 612, 714, 816, 919, 1020},\n",
        "    'T2': {101, 305, 509, 612, 816, 919},\n",
        "    'T3': {203, 407, 612, 714, 816},\n",
        "    'T4': {1020, 305, 407, 612, 714},\n",
        "    'T5': {101, 203, 305, 509},\n",
        "    'T6': {612, 714, 816, 919, 1020},\n",
        "    'T7': {203, 407, 509, 612, 714},\n",
        "    'T8': {101, 305, 816, 919},\n",
        "    'T9': {509, 612, 714, 1020},\n",
        "    'T10': {203, 305, 407, 612},\n",
        "    'T11': {101, 816, 919, 1020},\n",
        "    'T12': {305, 407, 509, 714},\n",
        "    'T13': {612, 714, 816, 919},\n",
        "    'T14': {101, 203, 305, 509},\n",
        "    'T15': {305, 509, 714, 919},\n",
        "}\n",
        "\n",
        "treatment_costs = {\n",
        "    'T1': 150, 'T2': 200, 'T3': 75, 'T4': 120, 'T5': 90,\n",
        "    'T6': 180, 'T7': 85, 'T8': 250, 'T9': 95, 'T10': 110,\n",
        "    'T11': 300, 'T12': 80, 'T13': 160, 'T14': 170, 'T15': 300\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1lzMnPjWDrGb"
      },
      "source": [
        "### A"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0f93xApaVVq",
        "outputId": "27f3de8f-d8fe-4bbe-dabc-16805ef0b244"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Contingency Table:\n",
            "Readmission     0     1\n",
            "T1                     \n",
            "0            7997  1993\n",
            "1               3     7\n",
            "\n",
            "Lift for T1: 3.5000\n",
            "Chi-square Statistic: 15.6406\n",
            "P-value: 0.0001\n"
          ]
        }
      ],
      "source": [
        "df = pd.read_excel('Q3_Data.xlsx', sheet_name='Sheet2')\n",
        "T1_patients = {101, 203, 305, 407, 509, 612, 714, 816, 919, 1020}\n",
        "df['T1'] = df['TID'].apply(lambda x: 1 if x in T1_patients else 0)\n",
        "\n",
        "contingency_table = pd.crosstab(df['T1'], df['Readmission'])\n",
        "\n",
        "\n",
        "N00 = contingency_table.loc[0, 0] if (0 in contingency_table.index and 0 in contingency_table.columns) else 0\n",
        "N01 = contingency_table.loc[0, 1] if (0 in contingency_table.index and 1 in contingency_table.columns) else 0\n",
        "N10 = contingency_table.loc[1, 0] if (1 in contingency_table.index and 0 in contingency_table.columns) else 0\n",
        "N11 = contingency_table.loc[1, 1] if (1 in contingency_table.index and 1 in contingency_table.columns) else 0\n",
        "\n",
        "\n",
        "P_readmit = (N01 + N11) / (N00 + N01 + N10 + N11)\n",
        "P_T1_given_readmit = N11 / (N11 + N01) if (N11 + N01) > 0 else 0\n",
        "P_T1 = (N10 + N11) / (N00 + N01 + N10 + N11)\n",
        "\n",
        "lift = P_T1_given_readmit / P_T1 if P_T1 > 0 else 0\n",
        "\n",
        "\n",
        "chi2, p_val, dof, expected = chi2_contingency(contingency_table, correction=False)\n",
        "\n",
        "\n",
        "print(\"Contingency Table:\")\n",
        "print(contingency_table)\n",
        "print(f\"\\nLift for T1: {lift:.4f}\")\n",
        "print(f\"Chi-square Statistic: {chi2:.4f}\")\n",
        "print(f\"P-value: {p_val:.4f}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Af13EX7LDu9r"
      },
      "source": [
        "### B"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-yWdpbnI41xf",
        "outputId": "9217a533-6999-485f-bbfb-39fd4377bf91"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Frequent 1-itemsets (support >= 5):\n",
            "{'T3', 'T4', 'T7', 'T2', 'T1', 'T6'}\n",
            "\n",
            "Frequent 2-itemsets:\n",
            "('T3', 'T1') => support: 5\n",
            "('T4', 'T1') => support: 5\n",
            "('T7', 'T1') => support: 5\n",
            "('T2', 'T1') => support: 6\n",
            "('T1', 'T6') => support: 5\n",
            "\n",
            "Frequent 3-itemsets:\n",
            "('T3', 'T7', 'T1') => support: 4\n"
          ]
        }
      ],
      "source": [
        "frequent_1_itemsets = {item for item, tids in item_tid.items() if len(tids) >= 5}\n",
        "print(\"Frequent 1-itemsets (support >= 5):\")\n",
        "print(frequent_1_itemsets)\n",
        "\n",
        "# 2-item\n",
        "from itertools import combinations\n",
        "\n",
        "frequent_2_itemsets = {}\n",
        "\n",
        "for item1, item2 in combinations(frequent_1_itemsets, 2):\n",
        "    tids1 = item_tid[item1]\n",
        "    tids2 = item_tid[item2]\n",
        "    intersection = tids1 & tids2\n",
        "    if len(intersection) >= 5:\n",
        "        frequent_2_itemsets[(item1, item2)] = intersection\n",
        "\n",
        "print(\"\\nFrequent 2-itemsets:\")\n",
        "for pair, tids in frequent_2_itemsets.items():\n",
        "    print(f\"{pair} => support: {len(tids)}\")\n",
        "\n",
        "\n",
        "# 3-item\n",
        "frequent_3_itemsets = {}\n",
        "\n",
        "for item1, item2, item3 in combinations(frequent_1_itemsets, 3):\n",
        "    tids1 = item_tid[item1]\n",
        "    tids2 = item_tid[item2]\n",
        "    tids3 = item_tid[item3]\n",
        "    intersection = tids1 & tids2 & tids3\n",
        "    if len(intersection) >= 4:\n",
        "        frequent_3_itemsets[(item1, item2, item3)] = intersection\n",
        "\n",
        "print(\"\\nFrequent 3-itemsets:\")\n",
        "for triple, tids in frequent_3_itemsets.items():\n",
        "    print(f\"{triple} => support: {len(tids)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sm-v9uIID00o"
      },
      "source": [
        "### C"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LT2fFr1ED37B",
        "outputId": "e55a7973-7944-4f49-ed8f-44ee6435c401"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Patient 407: Total cost = $620\n",
            "Patient 612: Total cost = $1175\n",
            "Patient 101: Total cost = $1160\n",
            "Patient 714: Total cost = $1245\n",
            "Patient 203: Total cost = $680\n",
            "Patient 816: Total cost = $1315\n",
            "Patient 305: Total cost = $1470\n",
            "Patient 919: Total cost = $1540\n",
            "Patient 1020: Total cost = $845\n",
            "Patient 509: Total cost = $1170\n"
          ]
        }
      ],
      "source": [
        "from collections import defaultdict\n",
        "\n",
        "tid_items = defaultdict(set)\n",
        "for treatment, tids in item_tid.items():\n",
        "    for tid in tids:\n",
        "        tid_items[tid].add(treatment)\n",
        "\n",
        "tid_costs = {\n",
        "    tid: sum(treatment_costs[t] for t in treatments)\n",
        "    for tid, treatments in tid_items.items()\n",
        "}\n",
        "\n",
        "\n",
        "for tid, cost in tid_costs.items():\n",
        "    print(f\"Patient {tid}: Total cost = ${cost}\")\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OR4A50cNRFhM"
      },
      "source": [
        "## Question 5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "iWI7FOWeRG7S",
        "outputId": "61b55010-5147-42eb-bd8d-95d957749288"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   movieId                               title  \\\n",
              "0        1                    Toy Story (1995)   \n",
              "1        2                      Jumanji (1995)   \n",
              "2        3             Grumpier Old Men (1995)   \n",
              "3        4            Waiting to Exhale (1995)   \n",
              "4        5  Father of the Bride Part II (1995)   \n",
              "\n",
              "                                        genres  \n",
              "0  Adventure|Animation|Children|Comedy|Fantasy  \n",
              "1                   Adventure|Children|Fantasy  \n",
              "2                               Comedy|Romance  \n",
              "3                         Comedy|Drama|Romance  \n",
              "4                                       Comedy  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9bc89d3-a0e3-4a49-9fb6-e397b1437442\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Jumanji (1995)</td>\n",
              "      <td>Adventure|Children|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Grumpier Old Men (1995)</td>\n",
              "      <td>Comedy|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Waiting to Exhale (1995)</td>\n",
              "      <td>Comedy|Drama|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Father of the Bride Part II (1995)</td>\n",
              "      <td>Comedy</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9bc89d3-a0e3-4a49-9fb6-e397b1437442')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9bc89d3-a0e3-4a49-9fb6-e397b1437442 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9bc89d3-a0e3-4a49-9fb6-e397b1437442');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-43ff6396-93b8-444c-9256-12785e91488e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-43ff6396-93b8-444c-9256-12785e91488e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-43ff6396-93b8-444c-9256-12785e91488e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "movies_df",
              "summary": "{\n  \"name\": \"movies_df\",\n  \"rows\": 62423,\n  \"fields\": [\n    {\n      \"column\": \"movieId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63264,\n        \"min\": 1,\n        \"max\": 209171,\n        \"num_unique_values\": 62423,\n        \"samples\": [\n          4990,\n          116698,\n          125517\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 62325,\n        \"samples\": [\n          \"So Dear to My Heart (1949)\",\n          \"Give Me Liberty (2019)\",\n          \"Vice (2015)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1639,\n        \"samples\": [\n          \"Action|Adventure|Crime|Western\",\n          \"Action|Comedy|Drama|Romance|Thriller\",\n          \"Animation|Documentary|Drama|Fantasy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# first we read the datas.\n",
        "movies_df = pd.read_csv(\"movies.csv\")\n",
        "movies_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "gz5bwIbxI8XJ"
      },
      "outputs": [],
      "source": [
        "movies_df.columns = ['movie_id', 'title', 'genres'] # Then rewriting the columns' names in a more standard way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HRQwrDOBHwsg",
        "outputId": "e87e57e7-c2ce-4684-f012-828cd59f70bb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 62423 entries, 0 to 62422\n",
            "Data columns (total 3 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   movie_id  62423 non-null  int64 \n",
            " 1   title     62423 non-null  object\n",
            " 2   genres    62423 non-null  object\n",
            "dtypes: int64(1), object(2)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ],
      "source": [
        "movies_df.info()  # Getting information to get to know the data better."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "sZGwRPOORHS6",
        "outputId": "aab857ef-e4b4-4156-c372-702d29a490c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   userId  movieId  rating   timestamp\n",
              "0       1      296     5.0  1147880044\n",
              "1       1      306     3.5  1147868817\n",
              "2       1      307     5.0  1147868828\n",
              "3       1      665     5.0  1147878820\n",
              "4       1      899     3.5  1147868510"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-330c9213-a97f-4c8b-856f-e2782bfb6a22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>userId</th>\n",
              "      <th>movieId</th>\n",
              "      <th>rating</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>296</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147880044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>306</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>307</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147868828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>665</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147878820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>899</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868510</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-330c9213-a97f-4c8b-856f-e2782bfb6a22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-330c9213-a97f-4c8b-856f-e2782bfb6a22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-330c9213-a97f-4c8b-856f-e2782bfb6a22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ff9e8da1-d6ab-4781-a49c-344e84fa9c70\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff9e8da1-d6ab-4781-a49c-344e84fa9c70')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ff9e8da1-d6ab-4781-a49c-344e84fa9c70 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ratings_df"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# first we read the datas.\n",
        "ratings_df = pd.read_csv(\"ratings.csv\")\n",
        "ratings_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "3C2k81b1H3tL"
      },
      "outputs": [],
      "source": [
        "ratings_df.columns = ['user_id', 'movie_id', 'rating', 'time_stamp']   # Then rewriting the columns' names in a more standard way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWD4KKodJUBK",
        "outputId": "2302405d-99c1-469d-da40-0b3925a20b09"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3385356 entries, 0 to 3385355\n",
            "Data columns (total 4 columns):\n",
            " #   Column      Dtype  \n",
            "---  ------      -----  \n",
            " 0   user_id     int64  \n",
            " 1   movie_id    int64  \n",
            " 2   rating      float64\n",
            " 3   time_stamp  int64  \n",
            "dtypes: float64(1), int64(3)\n",
            "memory usage: 103.3 MB\n"
          ]
        }
      ],
      "source": [
        "ratings_df.info()   # Getting information to get to know the data better."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "o8spwmI0RHWY",
        "outputId": "906d99c9-4af2-4f51-b4aa-8fa41911779c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  movie_id  rating  time_stamp            datetime        date\n",
              "0        1       296     5.0  1147880044 2006-05-17 15:34:04  2006-05-17\n",
              "1        1       306     3.5  1147868817 2006-05-17 12:26:57  2006-05-17\n",
              "2        1       307     5.0  1147868828 2006-05-17 12:27:08  2006-05-17\n",
              "3        1       665     5.0  1147878820 2006-05-17 15:13:40  2006-05-17\n",
              "4        1       899     3.5  1147868510 2006-05-17 12:21:50  2006-05-17"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f66c618c-e5e6-471a-bcbb-16c6a601bef1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>movie_id</th>\n",
              "      <th>rating</th>\n",
              "      <th>time_stamp</th>\n",
              "      <th>datetime</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>296</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147880044</td>\n",
              "      <td>2006-05-17 15:34:04</td>\n",
              "      <td>2006-05-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>306</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868817</td>\n",
              "      <td>2006-05-17 12:26:57</td>\n",
              "      <td>2006-05-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>307</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147868828</td>\n",
              "      <td>2006-05-17 12:27:08</td>\n",
              "      <td>2006-05-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>665</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147878820</td>\n",
              "      <td>2006-05-17 15:13:40</td>\n",
              "      <td>2006-05-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>899</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868510</td>\n",
              "      <td>2006-05-17 12:21:50</td>\n",
              "      <td>2006-05-17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f66c618c-e5e6-471a-bcbb-16c6a601bef1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f66c618c-e5e6-471a-bcbb-16c6a601bef1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f66c618c-e5e6-471a-bcbb-16c6a601bef1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a31a21fb-60eb-45c2-a9f8-0aafef3b6f56\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a31a21fb-60eb-45c2-a9f8-0aafef3b6f56')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a31a21fb-60eb-45c2-a9f8-0aafef3b6f56 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ratings_df"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "from datetime import datetime\n",
        "# Adding date time and the date\n",
        "ratings_df['datetime'] = pd.to_datetime(ratings_df['time_stamp'], unit='s')\n",
        "ratings_df['date'] = ratings_df['datetime'].dt.date\n",
        "ratings_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "47ncNQASRCrX",
        "outputId": "27ba2fed-a6f4-410a-9642-dd5143d3bb8f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  movie_id  rating  time_stamp            datetime        date  \\\n",
              "0        1       296     5.0  1147880044 2006-05-17 15:34:04  2006-05-17   \n",
              "1        1       306     3.5  1147868817 2006-05-17 12:26:57  2006-05-17   \n",
              "2        1       307     5.0  1147868828 2006-05-17 12:27:08  2006-05-17   \n",
              "3        1       665     5.0  1147878820 2006-05-17 15:13:40  2006-05-17   \n",
              "4        1       899     3.5  1147868510 2006-05-17 12:21:50  2006-05-17   \n",
              "\n",
              "    day_name day_type  \n",
              "0  Wednesday  weekday  \n",
              "1  Wednesday  weekday  \n",
              "2  Wednesday  weekday  \n",
              "3  Wednesday  weekday  \n",
              "4  Wednesday  weekday  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc9aecc3-66e0-4035-abbc-187fde13c162\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>movie_id</th>\n",
              "      <th>rating</th>\n",
              "      <th>time_stamp</th>\n",
              "      <th>datetime</th>\n",
              "      <th>date</th>\n",
              "      <th>day_name</th>\n",
              "      <th>day_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>296</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147880044</td>\n",
              "      <td>2006-05-17 15:34:04</td>\n",
              "      <td>2006-05-17</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>weekday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>306</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868817</td>\n",
              "      <td>2006-05-17 12:26:57</td>\n",
              "      <td>2006-05-17</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>weekday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>307</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147868828</td>\n",
              "      <td>2006-05-17 12:27:08</td>\n",
              "      <td>2006-05-17</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>weekday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>665</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1147878820</td>\n",
              "      <td>2006-05-17 15:13:40</td>\n",
              "      <td>2006-05-17</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>weekday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>899</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1147868510</td>\n",
              "      <td>2006-05-17 12:21:50</td>\n",
              "      <td>2006-05-17</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>weekday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc9aecc3-66e0-4035-abbc-187fde13c162')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dc9aecc3-66e0-4035-abbc-187fde13c162 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dc9aecc3-66e0-4035-abbc-187fde13c162');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2c788ff1-1ca8-497a-a866-704658b4760d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c788ff1-1ca8-497a-a866-704658b4760d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2c788ff1-1ca8-497a-a866-704658b4760d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ratings_df"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "ratings_df['day_name'] = ratings_df['datetime'].dt.day_name()\n",
        "ratings_df['day_type'] = ratings_df['day_name'].apply(\n",
        "    lambda x: 'weekend' if x in ['Friday', 'Saturday'] else 'weekday'\n",
        ")\n",
        "ratings_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UXdwG02sKN2s"
      },
      "source": [
        "### Section 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "HMcaNyBbRCn5"
      },
      "outputs": [],
      "source": [
        "merged_df = ratings_df.merge(movies_df[['movie_id', 'genres']], on='movie_id', how='left')\n",
        "transactions = merged_df.groupby(['user_id', 'date', 'day_type'])['genres'].apply(list).reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "x7AGUildOmEV"
      },
      "outputs": [],
      "source": [
        "def has_family_or_children(genres_list):\n",
        "    return any(('Family' in genre or 'Children' in genre) for genre in genres_list)\n",
        "\n",
        "def has_documentary_or_educational(genres_list):\n",
        "    return any(('Documentary' in genre or 'Educational' in genre) for genre in genres_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "ld7vgLFnKKZ1"
      },
      "outputs": [],
      "source": [
        "from mlxtend.preprocessing import TransactionEncoder\n",
        "from mlxtend.frequent_patterns import fpgrowth"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "HSRQKZXZS-xe"
      },
      "outputs": [],
      "source": [
        "weekday_transactions = transactions[(transactions['day_type'] == 'weekday') &\n",
        "                                     (transactions['genres'].apply(has_documentary_or_educational))]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "fJbXHgaKTBMz"
      },
      "outputs": [],
      "source": [
        "weekend_transactions = transactions[(transactions['day_type'] == 'weekend') &\n",
        "                                     (transactions['genres'].apply(has_family_or_children))]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "VnN3zqEUNw0b"
      },
      "outputs": [],
      "source": [
        "genres = ['Family', 'Children', 'Documentary', 'Educational', 'Drama', 'Comedy', 'Adventure']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "d9ijcG4dbzFj"
      },
      "outputs": [],
      "source": [
        "te_weekday = TransactionEncoder()\n",
        "te_array_weekday = te_weekday.fit(weekday_transactions['genres']).transform(weekday_transactions['genres'])\n",
        "df_weekday = pd.DataFrame(te_array_weekday, columns=te_weekday.columns_)\n",
        "df_weekday = df_weekday[[col for col in genres if col in df_weekday.columns]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "5A5dp63RZUDK"
      },
      "outputs": [],
      "source": [
        "te_weekend = TransactionEncoder()\n",
        "te_array_weekend = te_weekend.fit(weekend_transactions['genres']).transform(weekend_transactions['genres'])\n",
        "df_weekend = pd.DataFrame(te_array_weekend, columns=te_weekend.columns_)\n",
        "df_weekend = df_weekend[[col for col in genres if col in df_weekend.columns]]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "k_MWr1EtZUHb"
      },
      "outputs": [],
      "source": [
        "frequent_patterns_weekday = fpgrowth(df_weekday, min_support=0.05, use_colnames=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "bzeOnLlIZULE"
      },
      "outputs": [],
      "source": [
        "frequent_patterns_weekend = fpgrowth(df_weekend, min_support=0.05, use_colnames=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zG321guEZUFO",
        "outputId": "5e7cdf1b-622b-4908-d489-cc86072cd5c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    support                      itemsets\n",
            "0  0.602133                       (Drama)\n",
            "1  0.575604                      (Comedy)\n",
            "2  0.178084                 (Documentary)\n",
            "3  0.458960               (Drama, Comedy)\n",
            "4  0.158412          (Documentary, Drama)\n",
            "5  0.148300         (Documentary, Comedy)\n",
            "6  0.139641  (Documentary, Drama, Comedy)\n"
          ]
        }
      ],
      "source": [
        "print(frequent_patterns_weekend)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nL8RuBheZnkS",
        "outputId": "568057a3-b5a5-4cf9-c003-ad46c96a3b02"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    support                      itemsets\n",
            "0  0.794077                 (Documentary)\n",
            "1  0.629151                       (Drama)\n",
            "2  0.560865                      (Comedy)\n",
            "3  0.510815          (Documentary, Drama)\n",
            "4  0.492113               (Drama, Comedy)\n",
            "5  0.450715         (Documentary, Comedy)\n",
            "6  0.401065  (Documentary, Drama, Comedy)\n"
          ]
        }
      ],
      "source": [
        "print(frequent_patterns_weekday)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oYL2DMXWxC0g"
      },
      "source": [
        "### Section 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "cCRh3-SOxIhc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2addc3a3-e582-403b-8d8a-b87a707a955f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 Association Rules - Weekend:\n",
            "             antecedents      consequents   support  confidence      lift\n",
            "6          (Documentary)  (Drama, Comedy)  0.139641    0.784131  1.708496\n",
            "5  (Documentary, Comedy)          (Drama)  0.139641    0.941616  1.563800\n",
            "4   (Documentary, Drama)         (Comedy)  0.139641    0.881504  1.531441\n",
            "2          (Documentary)          (Drama)  0.158412    0.889537  1.477309\n",
            "3          (Documentary)         (Comedy)  0.148300    0.832750  1.446740\n",
            "Top 5 Association Rules - Weekday:\n",
            "             antecedents           consequents   support  confidence      lift\n",
            "5  (Documentary, Comedy)               (Drama)  0.401065    0.889841  1.414350\n",
            "7               (Comedy)  (Documentary, Drama)  0.401065    0.715082  1.399885\n",
            "4   (Documentary, Drama)              (Comedy)  0.401065    0.785147  1.399885\n",
            "1                (Drama)              (Comedy)  0.492113    0.782186  1.394605\n",
            "2               (Comedy)               (Drama)  0.492113    0.877418  1.394605\n"
          ]
        }
      ],
      "source": [
        "from mlxtend.frequent_patterns import association_rules\n",
        "\n",
        "# Weekend rules\n",
        "weekend_rules = association_rules(frequent_patterns_weekend, metric=\"confidence\", min_threshold=0.65)\n",
        "filtered_weekend_rules = weekend_rules[weekend_rules.lift >= 1.3]\n",
        "top5_weekend = filtered_weekend_rules.nlargest(5, 'lift')\n",
        "\n",
        "print(\"Top 5 Association Rules - Weekend:\")\n",
        "print(top5_weekend[['antecedents', 'consequents', 'support', 'confidence', 'lift']])\n",
        "\n",
        "# Weekday rules\n",
        "weekday_rules = association_rules(frequent_patterns_weekday, metric=\"confidence\", min_threshold=0.65)\n",
        "filtered_weekday_rules = weekday_rules[weekday_rules.lift >= 1.3]\n",
        "top5_weekday = filtered_weekday_rules.nlargest(5, 'lift')\n",
        "\n",
        "print(\"Top 5 Association Rules - Weekday:\")\n",
        "print(top5_weekday[['antecedents', 'consequents', 'support', 'confidence', 'lift']])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x-SqLAWnxIyh"
      },
      "source": [
        "### Section 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "id": "JqsAgl0qxLDq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "outputId": "7e18e3ae-ebf8-488f-dde6-78cbc5fdf941"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "frequent_patterns_weekend['pattern_size'] = frequent_patterns_weekend['itemsets'].apply(len)\n",
        "frequent_patterns_weekday['pattern_size'] = frequent_patterns_weekday['itemsets'].apply(len)\n",
        "\n",
        "def plot_pattern_sizes(df, title, color, ax):\n",
        "    counts = df['pattern_size'].value_counts().sort_index()\n",
        "    ax.bar(counts.index, counts.values, color=color)\n",
        "    ax.set_title(title)\n",
        "    ax.set_xlabel('Size')\n",
        "    ax.set_ylabel('Frequency')\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 4))\n",
        "\n",
        "plot_pattern_sizes(frequent_patterns_weekend, 'Weekend - Pattern Size', '#a01a58', axes[0])\n",
        "plot_pattern_sizes(frequent_patterns_weekday, 'Weekday - Pattern Size', '#1780a1', axes[1])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Heatmap"
      ],
      "metadata": {
        "id": "Yn8ExhIQmsmU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "genres = ['Documentary', 'Drama', 'Comedy']\n",
        "\n",
        "weekend_data = [\n",
        "    [0.17, 0.16, 0.15],\n",
        "    [0.16, 0.60, 0.46],\n",
        "    [0.15, 0.46, 0.57]\n",
        "]\n",
        "\n",
        "weekday_data = [\n",
        "    [0.79, 0.51, 0.45],\n",
        "    [0.51, 0.63, 0.49],\n",
        "    [0.45, 0.49, 0.56]\n",
        "]\n",
        "\n",
        "weekend_df = pd.DataFrame(weekend_data, index=genres, columns=genres)\n",
        "weekday_df = pd.DataFrame(weekday_data, index=genres, columns=genres)\n",
        "\n",
        "def remove_diag(df):\n",
        "    df = df.copy()\n",
        "    np.fill_diagonal(df.values, 0)\n",
        "    return df\n",
        "\n",
        "def plot_heatmap(df, title):\n",
        "    plt.figure(figsize=(6, 5))\n",
        "    sns.heatmap(df, annot=True, cmap='coolwarm', square=True)\n",
        "    plt.title(title)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "plot_heatmap(remove_diag(weekend_df), \"Genre Co-occurrence Heatmap - Weekend\")\n",
        "plot_heatmap(remove_diag(weekday_df), \"Genre Co-occurrence Heatmap - Weekday\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Tt6GFUtucw3v",
        "outputId": "a32c4cea-9e4a-40d3-956d-16e81b9b2db4"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "bGGRAZbh0YmK",
        "Y_mzdn890gPe",
        "yqod7VGTNoeI",
        "fWnStKzONtDN",
        "jRyydqxLU20Y",
        "0kQZwYhoOMwR",
        "YMX58kwAK-7Y",
        "1lzMnPjWDrGb",
        "Af13EX7LDu9r",
        "sm-v9uIID00o",
        "OR4A50cNRFhM",
        "oYL2DMXWxC0g",
        "x-SqLAWnxIyh",
        "Yn8ExhIQmsmU"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
